#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, gun, bwheell, bwheelr, fwheell, fwheelr;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	gun_1 = flare1;
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}


StartMoving()
{
 	spin bwheell around x-axis speed <450> accelerate <130>;
 	spin fwheell around x-axis speed <500> accelerate <150>;
 	spin bwheelr around x-axis speed <450> accelerate <130>;
 	spin fwheelr around x-axis speed <500> accelerate <150>;

}

StopMoving()
{
 	stop-spin bwheell around x-axis decelerate <360>;
 	stop-spin fwheell around x-axis decelerate <460>;
 	stop-spin bwheelr around x-axis decelerate <360>;
 	stop-spin fwheelr around x-axis decelerate <460>;

}


RestoreAfterDelay()
{
	sleep restore_delay;
	turn gun to y-axis <0.000000> speed <90.000000>;
	turn gun to x-axis <0.000000> speed <50.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn gun to y-axis heading speed <180.000000>;
	turn gun to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn gun around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 from flare1;
		sleep 50;
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from flare2;
		sleep 50;
	}
	gun_1 = !gun_1;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode gun type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode bwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode bwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode fwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode bwheell type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode fwheelr type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	
	return (0);
}
