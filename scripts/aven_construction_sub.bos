#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  hull, door1, door2, wake, plate, post, nano, beam;

static-var  Static_Var_1, isOpen;

// Signal definitions
#define SIG_MOVE			2
#define SIG_BUILD			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from hull;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

activatescr()
{
	if( !isOpen )
	{
		turn door1 to z-axis <-90.000000> speed <175.000000>;
		turn door2 to z-axis <90.000000> speed <175.000000>;
		sleep 200;
		move plate to y-axis [10.000000] speed [6.250000];
		sleep 200;
		isOpen = TRUE;
	}
	sleep 30;
	return (0);
}

deactivatescr()
{
	if( isOpen )
	{
		isOpen = FALSE;
		move plate to y-axis [0.000000] speed [17.500000];
		sleep 200;
		turn door1 to z-axis <0.000000> speed <210.000000>;
		turn door2 to z-axis <0.000000> speed <210.000000>;
		sleep 200;
	}
	sleep 30;
	return (0);
}

Go()
{
	call-script activatescr();
	turn post to y-axis Static_Var_1 speed <150.000000>;
	wait-for-turn post around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn post to y-axis <0.000000> speed <150.000000>;
	wait-for-turn post around y-axis;
	call-script deactivatescr();
	return (0);
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake;
		sleep 200;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	isOpen = FALSE;
	start-script SmokeUnit();
	return (0);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script Go();
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	set-signal-mask SIG_BUILD;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;
	start-script Stop();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = hull;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode post type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP1;
		explode nano type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hull type SHATTER | BITMAP4;
		explode door1 type SHATTER | BITMAP4;
		explode door2 type SHATTER | BITMAP4;
		explode post type SHATTER | BITMAP4;
		explode plate type SHATTER | BITMAP4;
		explode nano type SHATTER | BITMAP4;
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hull type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode plate type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode hull type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode plate type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
