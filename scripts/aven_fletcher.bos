#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, wake1, wake2, hull, bottom, h2, left, right, turret, sleeve, l1,l2,l3,l4,flare1,flare2,flare3,flare4;

static-var  gun_1,restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	restore_delay = 3000;
	gun_1 = [0];
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0> speed <100.000000>;
	turn sleeve to x-axis <0> speed <100.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <225.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <140.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay(); 	
	return (1);
}


Shot1()
{
	if(gun_1 == [0])
	{
		emit-sfx 1024+0 from flare1;
		gun_1 = [1];
		return 0;
	}
	if(gun_1 == [1])
	{
		emit-sfx 1024+0 from flare2;
		gun_1 = [2];
		return 0;
	}
	if(gun_1 == [2])
	{
		emit-sfx 1024+0 from flare3;
		gun_1 = [3];
		return 0;
	}
	if(gun_1 == [3])
	{
		emit-sfx 1024+0 from flare4;
		gun_1 = [0];
		return 0;
	}		
}
FirePrimary()
{
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}


QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = flare1;
	}
	if(gun_1 == [1])
	{
		piecenum = flare2;
	}
	if(gun_1 == [2])
	{
		piecenum = flare3;
	}
	if(gun_1 == [3])
	{
		piecenum = flare4;
	}	
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode h2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode h2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode left type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode right type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode h2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode left type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode right type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode hull type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode bottom type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode h2 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode left type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode right type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}