#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, basetop,basetop2,basebottom, launcher,m1,f1,m2,f2,m3,f3, wing1, wing2, shieldpt;

static-var  statechg_DesiredState, statechg_StateChanging,gun_1;

// Signal definitions
#define SIG_AIM				2

activatescr()
{
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	gun_1=[0];
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}




Shot1()
{
	if(gun_1 == [0])
	{
		emit-sfx 1024 + 0 from f1;
		sleep 10;
		gun_1 = [1];
		return 0;
	}
	if(gun_1 == [1])
	{
		emit-sfx 1024 + 0 from f2;
		sleep 10;
		gun_1 = [2];
		return 0;
	}
	if(gun_1 == [2])
	{
		emit-sfx 1024 + 0 from f3;
		sleep 10;
		gun_1 = [0];
		return 0;
	}	
}

FirePrimary()
{
	return (0);


}

AimFromPrimary(piecenum)
{
	piecenum = launcher;
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum=f1;
	}
	if(gun_1 == [1])
	{
		piecenum=f2;
	}
	if(gun_1 == [2])
	{
		piecenum=f3;
	}	
}



QuerySecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}
Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode basetop type BITMAPONLY | BITMAP2;
		explode basebottom type BITMAPONLY | BITMAP3;
		explode wing1 type SHATTER | BITMAP5;
		explode wing2 type SHATTER | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode basetop type SHATTER | BITMAP2;
		explode basebottom type SHATTER | BITMAP3;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode basetop type SHATTER | BITMAP2;
		explode basebottom type SHATTER | BITMAP3;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode basetop type SHATTER | BITMAP2;
	explode basebottom type SHATTER | BITMAP3;
	explode wing1 type BITMAPONLY | BITMAP5;
	explode wing2 type BITMAPONLY | BITMAP1;
	return (0);
}
