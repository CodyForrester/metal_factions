#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2, base3, flarea, flareb, platforma,platformb,platformc,
       flarec1, flarec2, turreta, turretb, turretc, sleevec,  barrelc1, barrelc2, collarb, barrelb, barrela, sleevea, sleeveb, collarc, collara;

static-var  gun_3, restore_delay, Static_Var_3, Static_Var_4, Static_Var_5,
            statechg_DesiredState, statechg_StateChanging, Static_Var_8, Static_Var_9, Static_Var_10,
            Static_Var_11, Static_Var_12;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8



activatescr()
{

	move platformc to y-axis [10.000000] speed [15.000000];
	move platformb to y-axis [12.500000] speed [15.000000];
	move platforma to y-axis [10.000000] speed [15.000000];
	wait-for-move platformc along y-axis;
	wait-for-move platformb along y-axis;
	wait-for-move platforma along y-axis;
	
	move collarc to z-axis [1.000000] speed [15.000000];
	move collarb to z-axis [1.000000] speed [15.000000];
	move collara to z-axis [2.000000] speed [15.000000];
	wait-for-move collarc along z-axis;
	wait-for-move collarb along z-axis;
	wait-for-move collara along z-axis;
	
	move barrelc1 to z-axis [13.000000] speed [15.000000];
	move barrelc2 to z-axis [13.000000] speed [15.000000];	
	move barrelb to z-axis [18.000000] speed [15.000000];
	move barrela to z-axis [10.000000] speed [15.000000];
	wait-for-move barrelc1 along z-axis;
	wait-for-move barrelc2 along z-axis;
	wait-for-move barrelb along z-axis;
	wait-for-move barrela along z-axis;
		
	sleep 43;
	return (0);
}

deactivatescr()
{
	move barrelc1 to z-axis [0.000000] speed [15.000000];
	move barrelc2 to z-axis [0.000000] speed [15.000000];	
	move barrelb to z-axis [0.000000] speed [15.000000];
	move barrela to z-axis [0.000000] speed [15.000000];
	wait-for-move barrelc1 along z-axis;
	wait-for-move barrelc2 along z-axis;
	wait-for-move barrelb along z-axis;
	wait-for-move barrela along z-axis;

	move collarc to z-axis [0.000000] speed [15.000000];
	move collarb to z-axis [0.000000] speed [15.000000];
	move collara to z-axis [0.000000] speed [15.000000];
	wait-for-move collarc along z-axis;
	wait-for-move collarb along z-axis;
	wait-for-move collara along z-axis;

	move platformc to y-axis [0.000000] speed [15.000000];
	move platformb to y-axis [0.000000] speed [15.000000];
	move platforma to y-axis [0.000000] speed [15.000000];
	wait-for-move platformc along y-axis;
	wait-for-move platformb along y-axis;
	wait-for-move platforma along y-axis;
	
	sleep 54;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

go()
{
	dont-cache barrela;
	dont-cache barrelb;
	dont-cache barrelc1;
	dont-cache barrelc2;
	dont-cache collarb;
	dont-cache flarea;
	dont-cache flareb;
	dont-cache flarec1;
	dont-cache flarec2;
	dont-cache sleevea;
	dont-cache sleeveb;
	dont-cache sleevec;
	dont-cache turreta;
	dont-cache turretb;
	dont-cache turretc;
	call-script activatescr();
	set ACTIVATION to 1;
	Static_Var_3 = 1;
	set ARMORED to 0;
	return (0);
}

stop()
{
	set ARMORED to 1;
	Static_Var_3 = 0;
	set ACTIVATION to 0;
	call-script deactivatescr();
	cache barrela;
	cache barrelb;
	cache barrelc1;
	cache barrelc2;
	cache collarb;
	cache flarea;
	cache flareb;
	cache flarec1;
	cache flarec2;
	cache sleevea;
	cache sleeveb;
	cache sleevec;
	cache turreta;
	cache turretb;
	cache turretc;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	Static_Var_8 = 0;
	Static_Var_9 = 0;
	Static_Var_10 = 0;
	Static_Var_11 = 0;
	Static_Var_12 = 0;
	//start-script Flameon();
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	dont-shade barrela;
	dont-shade barrelb;
	dont-shade barrelc1;
	dont-shade barrelc2;
	dont-shade collarb;
	dont-shade flarea;
	dont-shade flareb;
	dont-shade flarec1;
	dont-shade flarec2;
	dont-shade sleevea;
	dont-shade sleeveb;
	dont-shade sleevec;
	dont-shade turreta;
	dont-shade turretb;
	dont-shade turretc;
	gun_3 = [0];
	call-script InitState();
	Static_Var_3 = 0;
	restore_delay = 2000;
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	set ARMORED to 1;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 4;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turreta to y-axis <0.000000> speed <100.000000>;
	turn sleevea to x-axis <0.000000> speed <100.000000>;
	wait-for-turn turreta around y-axis;
	wait-for-turn sleevea around x-axis;
	turn turretb to y-axis <0.000000> speed <300.000000>;
	turn sleeveb to x-axis <0.000000> speed <300.000000>;
	wait-for-turn turretb around y-axis;
	wait-for-turn sleeveb around x-axis;
	turn turretc to y-axis <0.000000> speed <200.000000>;
	turn sleevec to x-axis <0.000000> speed <200.000000>;
	wait-for-turn turretc around y-axis;
	wait-for-turn sleevec around x-axis;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turreta to y-axis heading speed <100.000000>;
	turn sleevea to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turreta around y-axis;
	wait-for-turn sleevea around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turretb to y-axis heading speed <200.000000>;
	turn sleeveb to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turretb around y-axis;
	wait-for-turn sleeveb around x-axis;
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn turretc to y-axis heading speed <300.000000>;
	turn sleevec to x-axis <0.000000> - pitch speed <300.000000>;
	wait-for-turn turretc around y-axis;
	wait-for-turn sleevec around x-axis;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024+0 from flarea;
	return (0);
}

FireSecondary()
{
	emit-sfx 1024+1 from flareb;
	return (0);
}

FireTertiary()
{
	if( gun_3 == [0] )
	{
		emit-sfx 1024+2 from flarec1;
		gun_3 = [1];
		return (0);
	}
	if( gun_3 == [1] )
	{
		emit-sfx 1024+2 from flarec2;
		gun_3 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turreta;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turretb;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = turretc;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flarea;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flareb;
	return (0);
}

QueryTertiary(piecenum)
{
	if( gun_3 == [0] )
	{
		piecenum = flarec1;
	}
	if( gun_3 == [1] )
	{
		piecenum = flarec2;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flarea;
	hide flareb;
	hide flarec1;
	hide flarec2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrela type BITMAPONLY | BITMAP1;
		explode barrelb type BITMAPONLY | BITMAP2;
		explode barrelc1 type BITMAPONLY | BITMAP3;
		explode barrelc2 type BITMAPONLY | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type BITMAPONLY | BITMAP1;
		explode flarea type BITMAPONLY | BITMAP2;
		explode flareb type BITMAPONLY | BITMAP3;
		explode flarec1 type BITMAPONLY | BITMAP4;
		explode flarec2 type BITMAPONLY | BITMAP5;
		explode sleevea type BITMAPONLY | BITMAP2;
		explode sleeveb type BITMAPONLY | BITMAP3;
		explode sleevec type BITMAPONLY | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrela type FALL | BITMAP1;
		explode barrelb type FALL | BITMAP2;
		explode barrelc1 type FALL | BITMAP3;
		explode barrelc2 type FALL | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | BITMAP1;
		explode flarea type FALL | BITMAP2;
		explode flareb type FALL | BITMAP3;
		explode flarec1 type FALL | BITMAP4;
		explode flarec2 type FALL | BITMAP5;
		explode sleevea type FALL | BITMAP2;
		explode sleeveb type FALL | BITMAP3;
		explode sleevec type FALL | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode base type BITMAPONLY | BITMAP5;
		explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turreta type BITMAPONLY | BITMAP5;
		explode turretb type BITMAPONLY | BITMAP1;
		explode turretc type SHATTER | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrelc1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode barrelc2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode base type BITMAPONLY | BITMAP5;
	explode collarb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flarea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode flareb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flarec1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flarec2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode sleevea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sleeveb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleevec type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turreta type BITMAPONLY | BITMAP5;
	explode turretb type BITMAPONLY | BITMAP1;
	explode turretc type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	return (0);
}
