#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turbase, turret, sleeve, llauncher, lflare,rlauncher,rflare,r1,r2,r3,l1,l2,l3, b1,b2,b3,b4,ldoor,rdoor,bottom,aimpt;

static-var  restore_delay, unitviewer, gun_1,canAim;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Open()
{
	SET ARMORED to FALSE;

	turn ldoor to z-axis <90.000000> speed <300.000000>;
	turn rdoor to z-axis <-90.000000> speed <300.000000>;
	wait-for-turn ldoor around z-axis;
	wait-for-turn rdoor around z-axis;

	move ldoor to y-axis [-25] speed [50];
	move rdoor to y-axis [-25] speed [50];
	move turbase to y-axis [25] speed [25];
	wait-for-move turbase along y-axis;
	wait-for-move ldoor along y-axis;
	wait-for-move rdoor along y-axis;

	canAim = TRUE;
}


Close()
{
	canAim = FALSE;

	turn sleeve to x-axis <0.000000> speed <300.000000>;
	turn turret to y-axis <0.000000> speed <300.000000>;
	move turbase to y-axis [0] speed [25];
	wait-for-turn sleeve around x-axis;
	wait-for-turn turret around y-axis;
	wait-for-move turbase along y-axis;

	move ldoor to y-axis [0] speed [50];
	move rdoor to y-axis [0] speed [50];
	wait-for-move ldoor along y-axis;
	wait-for-move rdoor along y-axis;
	
	turn ldoor to z-axis <0.000000> speed <300.000000>;
	turn rdoor to z-axis <0.000000> speed <300.000000>;
	wait-for-turn ldoor around z-axis;
	wait-for-turn rdoor around z-axis;
	
	SET ARMORED to TRUE;
}

Create()
{
	hide lflare;
	hide rflare;
	move aimpt to y-axis [40.000000] now;
	gun_1=[0];
	canAim = FALSE;
	restore_delay = 4000;
	unitviewer = FALSE;
	start-script SmokeUnit();
	start-script Close();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	
	call-script Close();
}

Demo()
{
	unitviewer = TRUE;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpt;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (canAim == FALSE)
	{
		call-script Open();
	}
	turn sleeve to x-axis <0.000000> - pitch speed <200.000000>;
	turn turret to y-axis heading speed <200.000000>;
	wait-for-turn sleeve around x-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == [0])
	{
		emit-sfx 1024+0 from lflare;
		sleep 100;
		gun_1 = [1];
		return(1);
	}
	if (gun_1 == [1])
	{
		emit-sfx 1024+0 from rflare;
		sleep 100;
		gun_1 = [0];
		return(1);
	}
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0])
	{
		piecenum = lflare;
	}
	if (gun_1 == [1])
	{
		piecenum = rflare;
	}
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP4;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | BITMAP4;
	explode turret type SHATTER | BITMAP4;
}
