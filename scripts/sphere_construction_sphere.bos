#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"


piece ground, hips,torso,sphere, nanospinner,p1,p2,p3,p4,p5,p6,shieldpt;

	
static-var bMoving,bBuilding, normalSpeed, slowSpeed, nanoPt;

// Signal definitions
#define SIG_BUILD				2


lua_checkEnergy() { return 0; }
lua_cobDebug() { return 0; }


MotionControl(hasEnergy)
{
	hasEnergy = 1;
	while (TRUE)
	{
		bMoving = (get CURRENT_SPEED) > 10000;

		// lua check for energy availability		
		call-script lua_checkEnergy(500);
		hasEnergy = get LUA1;
		
		// update speed and activation state
		if (bMoving && hasEnergy)
		{
			set ACTIVATION to TRUE;
			//set MAX_SPEED to normalSpeed; // DONE BY GADGET
		}
		if (!bMoving || !hasEnergy)
		{
			set ACTIVATION to FALSE;
			//set MAX_SPEED to slowSpeed;  // DONE BY GADGET
		}

		sleep 60;
	}
}


Build()
{
	while(TRUE)
	{
		if(bBuilding == TRUE)
		{
			emit-sfx 1024 + 0 from nanospinner;	
		}
		sleep 100;
	}
}

Create()
{
	normalSpeed = get MAX_SPEED;
	slowSpeed = normalSpeed / 4;
	bMoving=FALSE;
	bBuilding=FALSE;
	nanoPt = [0];	
	start-script MotionControl();
	start-script Build();
	spin nanospinner around y-axis speed <720.000000>;
}


QueryNanoPiece(piecenum)
{
	if(nanoPt == [0])
	{
		piecenum = p1;
		nanoPt = [1];
		return (0);
	}
	if(nanoPt == [1])
	{
		piecenum = p2;
		nanoPt = [2];
		return (0);
	}
	if(nanoPt == [2])
	{
		piecenum = p3;
		nanoPt = [3];
		return (0);
	}
	if(nanoPt == [3])
	{
		piecenum = p4;
		nanoPt = [4];
		return (0);
	}
	if(nanoPt == [4])
	{
		piecenum = p5;
		nanoPt = [5];
		return (0);
	}
	if(nanoPt == [5])
	{
		piecenum = p6;
		nanoPt = [0];
		return (0);
	}
}

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;

	bBuilding = TRUE;

	set INBUILDSTANCE to 1;
}


StopBuilding()
{
	signal SIG_BUILD;
	set-signal-mask SIG_BUILD;

	bBuilding = FALSE;
	set INBUILDSTANCE to 0;
}

SweetSpot(piecenum)
{
	piecenum = sphere;
}


AimFromPrimary(piecenum)
{
	piecenum = shieldpt;
}

QueryPrimary(piecenum)
{
	piecenum = shieldpt;
}


AimPrimary(heading, pitch)
{
	return (1);
}



Killed(severity, corpsetype)
{
	
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode sphere type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode sphere type SHATTER | BITMAP4;
	explode sphere type SHATTER | BITMAP4;
		
}

