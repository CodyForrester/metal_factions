#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, base2,sphere, turret, sleeve,flare,turret2, sleeve2,flare2, shieldpt;

static-var  currentHeading1, currentPitch1,currentHeading2, currentPitch2;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM2			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



Create()
{
	hide flare;
	//spin weapon around z-axis speed<200.000000>;
	start-script SmokeUnit();
}


RestoreAfterDelay1()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <50.005495>;
}

RestoreAfterDelay2()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret2 to y-axis <0.000000> speed <90.016484>;
	turn sleeve2 to x-axis <0.000000> speed <50.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <200.000000>;
	if (heading != currentHeading1 || pitch != currentPitch1) 
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		currentHeading1 = heading;
		currentPitch1 = pitch;
	}
	start-script RestoreAfterDelay1();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from shieldpt;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimWeapon3(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;
	turn turret2 to y-axis heading speed <220.038462>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <250.000000>;
	if (heading != currentHeading2 || pitch != currentPitch2) 
	{
		wait-for-turn turret2 around y-axis;
		wait-for-turn sleeve2 around x-axis;
		currentHeading2 = heading;
		currentPitch2 = pitch;
	}
	start-script RestoreAfterDelay2();
	return (1);
}

FireWeapon3()
{
	emit-sfx 1024 + 0 from shieldpt;
}

AimFromWeapon3(piecenum)
{
	piecenum = turret2;
}

QueryWeapon3(piecenum)
{
	piecenum = flare2;
}

QuerySecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = shieldpt;
	return (0);
}

AimSecondary(heading, pitch)
{
	return (1);
}
SweetSpot(piecenum)
{
	piecenum = sphere;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sphere type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base2 type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base2 type SHATTER | BITMAP4;
		explode sphere type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP2;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base2 type SHATTER | BITMAP4;
	explode sphere type SHATTER | BITMAP4;
	explode base type BITMAPONLY | BITMAP2;
	explode turret type SHATTER | BITMAP4;
}
