#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, hull, bottom, h2,turret, sleeve, barrel, b1, flash,barrel2, b2, flash2, wake1, wake2, depthcharge;

static-var  restore_delay, gun_1;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	restore_delay = 3000;
	start-script SmokeUnit();
	gun_1 = [0];
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn sleeve to x-axis <0.000000> speed <150.000000>;
	return (0);
}


StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 450;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <100.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == [0])
	{
		move barrel to z-axis [-2.500000] now;
		emit-sfx 1024+0 from flash;
		sleep 100;
		move barrel to z-axis [0.000000] speed [2.000000];
		gun_1 = [1];
		return (0);
	}
	if( gun_1 == [1])
	{
		move barrel2 to z-axis [-2.500000] now;
		emit-sfx 1024+0 from flash2;
		sleep 100;
		move barrel2 to z-axis [0.000000] speed [2.000000];
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if(gun_1 == [0])
	{
		piecenum = flash;
	}
	if(gun_1 == [1])
	{
		piecenum = flash2;
	}	
	return (0);
}


AimSecondary(heading, pitch)
{
	return (1);
}

FireSecondary()
{
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = depthcharge;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = depthcharge;
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = hull;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		
		explode sleeve type SHATTER;
		explode barrel type SHATTER;
		explode barrel2 type SHATTER;
		return (0);
	}
	corpsetype = 3;

	explode hull type SHATTER;
	explode bottom type SHATTER;
	explode turret type SHATTER;
	explode h2 type SHATTER;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
