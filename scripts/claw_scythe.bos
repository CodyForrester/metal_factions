#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 140


piece  base, turret, sleeve,barrel,flash,barrel2,flash2, body1,body2, lleg1, lleg2, lleg3,
       rleg3, rleg2, rleg1, bodysect1, head, turretholder, rleg22,
       rleg33, rleg11, lleg33, lleg22, lleg11;

static-var  bMoving, Static_Var_2, restore_delay, Static_Var_4, Static_Var_5,
            Static_Var_6, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
}

walk()
{
	if( bMoving )
	{
		turn rleg22 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lleg22 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		
		turn base to x-axis <2.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
		turn base to z-axis <-1.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

		turn lleg1 to y-axis <20.000000> speed <100.967033> * SPEEDUP_FACTOR / 100;
		turn lleg1 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lleg2 to y-axis <-20.000000> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lleg2 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lleg3 to y-axis <45.060440> speed <120.038462> * SPEEDUP_FACTOR / 100;
		turn lleg3 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rleg1 to y-axis <40.412088> speed <300.060440> * SPEEDUP_FACTOR / 100;
		turn rleg1 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rleg2 to y-axis <-20.093407> speed <100.368132> * SPEEDUP_FACTOR / 100;
		turn rleg2 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rleg3 to y-axis <15.137363> speed <300.681319> * SPEEDUP_FACTOR / 100;
		turn rleg3 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}

	// only vertical
	if( bMoving )
	{
		//turn lleg1 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lleg2 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn lleg3 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rleg1 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rleg2 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rleg3 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
	
	if( bMoving )
	{
		turn base to x-axis <-2.000000> speed <20.000000> * SPEEDUP_FACTOR / 100;
		turn base to z-axis <1.000000> speed <15.000000> * SPEEDUP_FACTOR / 100;

		turn lleg1 to y-axis <-40.000000> speed <300.967033> * SPEEDUP_FACTOR / 100;
		turn lleg1 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lleg2 to y-axis <20.000000> speed <100.038462> * SPEEDUP_FACTOR / 100;
		turn lleg2 to z-axis <5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;

		turn lleg3 to y-axis <-15.060440> speed <300.038462> * SPEEDUP_FACTOR / 100;
		turn lleg3 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn rleg1 to y-axis <-20.412088> speed <100.060440> * SPEEDUP_FACTOR / 100;
		turn rleg1 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		turn rleg2 to y-axis <20.093407> speed <300.368132> * SPEEDUP_FACTOR / 100;
		turn rleg2 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rleg3 to y-axis <-45.137363> speed <120.681319> * SPEEDUP_FACTOR / 100;
		turn rleg3 to z-axis <-5.016484> speed <550.104396> * SPEEDUP_FACTOR / 100;
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
	// only vertical
	if( bMoving )
	{
		turn rleg22 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;
		turn lleg22 to z-axis <0.000000> speed <80.000000> * SPEEDUP_FACTOR / 100;

		turn lleg1 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;

		//turn lleg2 to z-axis <-15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;

		turn lleg3 to z-axis <5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rleg1 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		turn rleg2 to z-axis <-5.016484> speed <150.104396> * SPEEDUP_FACTOR / 100;
		
		//turn rleg3 to z-axis <15.016484> speed <60.104396> * SPEEDUP_FACTOR / 100;
		
		
		sleep 175 * 100 / SPEEDUP_FACTOR;
	}
	
}
walk3()
{
	while( bMoving )
	{
		move base to y-axis [0.000000] speed [300.000000];
		turn rleg11 to z-axis <0.000000> speed <300.000000>;
		turn lleg33 to z-axis <0.000000> speed <300.000000>;
		turn rleg33 to z-axis <0.000000> speed <300.000000>;
		turn rleg22 to z-axis <0.000000> speed <300.000000>;
		turn lleg22 to z-axis <0.000000> speed <300.000000>;
		turn lleg11 to z-axis <0.000000> speed <300.000000>;
		turn rleg11 to z-axis <0.000000> speed <300.000000>;
		if( bMoving )
		{
			turn base to x-axis <-1.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
			turn lleg1 to y-axis <40.791209> now;
			turn lleg1 to y-axis <0.000000> speed <218.967033> * SPEEDUP_FACTOR / 100;
			turn lleg1 to z-axis <0.604396> now;
			turn lleg1 to z-axis <0.000000> speed <3.038462> * SPEEDUP_FACTOR / 100;
			turn lleg2 to z-axis <0.000000> now;
			turn lleg2 to z-axis <31.016484> speed <155.104396> * SPEEDUP_FACTOR / 100;
			turn lleg3 to y-axis <34.670330> now;
			turn lleg3 to y-axis <34.060440> speed <3.038462> * SPEEDUP_FACTOR / 100;
			turn lleg3 to z-axis <31.626374> now;
			turn lleg3 to z-axis <0.604396> speed <155.104396> * SPEEDUP_FACTOR / 100;
			turn rleg3 to y-axis <-40.137363> now;
			turn rleg3 to y-axis <-40.137363> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn rleg3 to z-axis <-31.016484> now;
			turn rleg3 to z-axis <-0.604396> speed <152.060440> * SPEEDUP_FACTOR / 100;
			turn rleg2 to y-axis <-37.093407> now;
			turn rleg2 to y-axis <0.000000> speed <185.516484> * SPEEDUP_FACTOR / 100;
			turn rleg2 to z-axis <0.000000> now;
			turn rleg2 to z-axis <0.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn rleg1 to y-axis <0.000000> now;
			turn rleg1 to y-axis <-30.412088> speed <152.060440> * SPEEDUP_FACTOR / 100;
			turn rleg1 to z-axis <-25.005495> now;
			sleep 200 * 100 / SPEEDUP_FACTOR;
		}
		if( bMoving )
		{
			turn base to x-axis <1.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
			turn lleg1 to z-axis <20.626374> speed <158.137363> * SPEEDUP_FACTOR / 100;
			turn lleg2 to y-axis <34.670330> speed <173.346154> * SPEEDUP_FACTOR / 100;
			turn lleg2 to z-axis <31.016484> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn lleg3 to y-axis <0.000000> speed <170.302198> * SPEEDUP_FACTOR / 100;
			turn lleg3 to z-axis <0.000000> speed <3.038462> * SPEEDUP_FACTOR / 100;
			turn rleg3 to y-axis <0.000000> speed <200.714286> * SPEEDUP_FACTOR / 100;
			turn rleg2 to z-axis <-31.016484> speed <155.104396> * SPEEDUP_FACTOR / 100;
			turn rleg1 to z-axis <2.423077> speed <237.214286> * SPEEDUP_FACTOR / 100;
			sleep 200 * 100 / SPEEDUP_FACTOR;
		}
		if( bMoving )
		{
			turn base to x-axis <-1.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
			turn lleg1 to y-axis <45.956044> speed <279.791209> * SPEEDUP_FACTOR / 100;
			turn lleg1 to z-axis <21.016484> speed <3.038462> * SPEEDUP_FACTOR / 100;
			turn lleg2 to y-axis <34.670330> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn lleg2 to z-axis <0.604396> speed <152.060440> * SPEEDUP_FACTOR / 100;
			turn lleg3 to z-axis <11.626374> speed <158.137363> * SPEEDUP_FACTOR / 100;
			turn rleg3 to y-axis <-0.604396> speed <3.038462> * SPEEDUP_FACTOR / 100;
			turn rleg3 to z-axis <-11.016484> speed <152.060440> * SPEEDUP_FACTOR / 100;
			turn rleg2 to y-axis <-31.626374> speed <158.137363> * SPEEDUP_FACTOR / 100;
			turn rleg2 to z-axis <-31.016484> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn rleg1 to y-axis <3.038462> speed <167.269231> * SPEEDUP_FACTOR / 100;
			sleep 200 * 100 / SPEEDUP_FACTOR;
		}
		turn base to x-axis <1.000000> speed <100.000000> * SPEEDUP_FACTOR / 100;
		turn lleg1 to y-axis <43.791209> speed <60.824176> * SPEEDUP_FACTOR / 100;
		turn lleg1 to z-axis <0.604396> speed <152.060440> * SPEEDUP_FACTOR / 100;
		turn lleg2 to y-axis <0.000000> speed <173.346154> * SPEEDUP_FACTOR / 100;
		turn lleg2 to z-axis <0.000000> speed <3.038462> * SPEEDUP_FACTOR / 100;
		turn lleg3 to y-axis <34.670330> speed <173.346154> * SPEEDUP_FACTOR / 100;
		turn lleg3 to z-axis <-31.626374> speed <0.000000> * SPEEDUP_FACTOR / 100;
		turn rleg3 to y-axis <-40.137363> speed <197.681319> * SPEEDUP_FACTOR / 100;
		turn rleg3 to z-axis <31.016484> speed <0.000000> * SPEEDUP_FACTOR / 100;
		turn rleg2 to y-axis <-37.093407> speed <27.368132> * SPEEDUP_FACTOR / 100;
		turn rleg2 to z-axis <0.000000> speed <155.104396> * SPEEDUP_FACTOR / 100;
		turn rleg1 to y-axis <0.000000> speed <15.203297> * SPEEDUP_FACTOR / 100;
		turn rleg1 to z-axis <-45.005495> speed <237.214286> * SPEEDUP_FACTOR / 100;
		sleep 200 * 100 / SPEEDUP_FACTOR;
	}
}

Stop()
{
	turn base to z-axis <0.000000> speed <7.000000>;
	turn base to x-axis <0.000000> speed <7.000000>;
	turn lleg1 to y-axis <-25.000000> speed <237.000000>;
	turn lleg1 to z-axis <0.000000> speed <237.000000>;
	turn lleg2 to y-axis <0.000000> speed <237.000000>;
	turn lleg2 to z-axis <0.000000> speed <237.000000>;
	turn lleg3 to y-axis <0.000000> speed <237.000000>;
	turn lleg3 to z-axis <0.000000> speed <237.000000>;
	turn rleg3 to y-axis <0.000000> speed <237.000000>;
	turn rleg3 to z-axis <0.000000> speed <237.000000>;
	turn rleg2 to y-axis <0.000000> speed <237.000000>;
	turn rleg2 to z-axis <0.000000> speed <237.000000>;
	turn rleg1 to y-axis <25.000000> speed <237.000000>;
	turn rleg1 to z-axis <0.000000> speed <237.000000>;

	//turn lleg3 to y-axis <20.000000> speed <300.000000>;
	//turn rleg3 to y-axis <-20.000000> speed <300.000000>;
	//turn rleg1 to y-axis <30.000000> speed <300.000000>;
	//turn lleg1 to y-axis <-30.000000> speed <300.000000>;
	//move base to y-axis [1.500000] speed [8.000000];
	//turn lleg3 to z-axis <40.000000> speed <300.000000>;
	//turn rleg3 to z-axis <-40.000000> speed <300.000000>;
	//turn rleg1 to z-axis <-40.000000> speed <300.000000>;
	//turn lleg1 to z-axis <40.000000> speed <300.000000>;
	//turn lleg2 to z-axis <40.000000> speed <300.000000>;
	//turn rleg2 to z-axis <-40.000000> speed <300.000000>;
	//turn rleg11 to z-axis <40.000000> speed <300.000000>;
	//turn lleg33 to z-axis <-40.000000> speed <300.000000>;
	//turn rleg33 to z-axis <40.000000> speed <300.000000>;
	//turn rleg22 to z-axis <40.000000> speed <300.000000>;
	//turn lleg22 to z-axis <-40.000000> speed <300.000000>;
	//turn lleg11 to z-axis <-40.000000> speed <300.000000>;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			call-script Stop();
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	Static_Var_4 = 0;
	restore_delay = 3000;
	Static_Var_5 = 2;
	gun_1 = [0];
	turn lleg3 to y-axis <20.000000> speed <300.000000>;
	turn rleg3 to y-axis <-20.000000> speed <300.000000>;
	turn rleg1 to y-axis <30.000000> speed <300.000000>;
	turn lleg1 to y-axis <-30.000000> speed <300.000000>;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <55.000000>;
	turn sleeve to x-axis <0.000000> speed <55.000000>;
	Static_Var_2 = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <180.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn sleeve around x-axis;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if (gun_1 == [0])
	{
		emit-sfx 1024+0 from flash;
		sleep 100;
		gun_1 = [1];
		return (0);
	}
	if (gun_1 == [1])
	{
		emit-sfx 1024+0 from flash2;
		sleep 100;
		gun_1 = [0];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if (gun_1 == [0])
	{
		piecenum = flash;
		return (0);
	}
	if (gun_1 == [1])
	{
		piecenum = flash2;
		return (0);
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel type SHATTER | BITMAP4;
		explode bodysect1 type BITMAPONLY | BITMAP3;
		explode lleg1 type BITMAPONLY | BITMAP4;
		explode lleg2 type BITMAPONLY | BITMAP3;
		explode lleg3 type BITMAPONLY | BITMAP5;
		explode rleg3 type BITMAPONLY | BITMAP3;
		explode rleg2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode rleg1 type BITMAPONLY | BITMAP5;
		explode turretholder type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode head type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel type SHATTER | BITMAP4;
		explode bodysect1 type BITMAPONLY | BITMAP3;
		explode lleg1 type SHATTER | BITMAP4;
		explode lleg2 type BITMAPONLY | BITMAP3;
		explode lleg3 type SHATTER | BITMAP5;
		explode rleg3 type BITMAPONLY | BITMAP3;
		explode rleg2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode rleg1 type BITMAPONLY | BITMAP5;
		explode turretholder type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel type SHATTER | BITMAP4;
		explode bodysect1 type BITMAPONLY | BITMAP3;
		explode lleg1 type BITMAPONLY | BITMAP4;
		explode lleg2 type BITMAPONLY | BITMAP3;
		explode lleg3 type BITMAPONLY | BITMAP5;
		explode rleg3 type BITMAPONLY | BITMAP3;
		explode rleg2 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode rleg1 type BITMAPONLY | BITMAP5;
		explode turretholder type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
	explode barrel type SHATTER | BITMAP4;
	explode bodysect1 type BITMAPONLY | BITMAP3;
	explode lleg1 type BITMAPONLY | BITMAP4;
	explode lleg2 type BITMAPONLY | BITMAP3;
	explode lleg3 type BITMAPONLY | BITMAP5;
	explode rleg3 type BITMAPONLY | BITMAP3;
	explode rleg2 type FALL | EXPLODE_ON_HIT | BITMAP3;
	explode rleg1 type BITMAPONLY | BITMAP5;
	explode turretholder type BITMAPONLY | BITMAP5;
}
