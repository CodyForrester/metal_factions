#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define HEADING_TOLERANCE	<25>
#define PITCH_TOLERANCE		<15>

piece  flareb, base, turret, sleeve, barrel, flare, sleeve2, barrel2, flare2, wake1, wake2, fp31, bottom;

static-var  gun_1, aimHeading, Static_Var_4, Static_Var_5;

#include "aimhelper1.h"

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


Abs(Func_Var_1)
{
	if( Func_Var_1 >= 0 )
	{
		Static_Var_4 = Func_Var_1;
	}
	else
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	return (0);
}

ProjXPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -21840 )
	{
		Static_Var_4 = Func_Var_1 * ( Func_Var_2 + 32760 ) / 10920;
	}
	else if( Func_Var_2 > 21840 )
	{
		Static_Var_4 = Func_Var_1 * ( 32760 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -10920 )
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 10920 )
	{
		Static_Var_4 = Func_Var_1;
	}
	else
	{
		Static_Var_4 = Func_Var_1 * Func_Var_2 / 10920;
	}
	return (0);
}

ProjZPW(Func_Var_1, Func_Var_2)
{
	if( Func_Var_2 < -27300 OR Func_Var_2 > 27300 )
	{
		Static_Var_4 = 0 - Func_Var_1;
	}
	else if( Func_Var_2 > 5460 )
	{
		Static_Var_4 = Func_Var_1 * ( 16380 - Func_Var_2 ) / 10920;
	}
	else if( Func_Var_2 < -5460 )
	{
		Static_Var_4 = Func_Var_1 * ( Func_Var_2 + 16380 ) / 10920;
	}
	else
	{
		Static_Var_4 = Func_Var_1;
	}
	return (0);
}

RockZInit()
{
	Static_Var_5 = 0;
	return (0);
}

RockZ(Func_Var_1, Func_Var_2)
{
	signal 128;
	set-signal-mask 128;
	call-script ProjXPW(10920 / Func_Var_2,Func_Var_1);
	Static_Var_5 = (Static_Var_5 + Static_Var_4)/6;
	call-script Abs(Static_Var_5);
	while( Static_Var_4 > 91 )
	{
		turn base to z-axis Static_Var_5 speed Static_Var_4 * <0.016484>;
		wait-for-turn base around z-axis;
		Static_Var_5 = Static_Var_5 * -1 / 2;
		call-script Abs(Static_Var_5);
	}
	turn base to z-axis <0.000000> speed <0.500000> * <0.016484>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide flare;
	hide flare2;
	hide flareb;
	gun_1 = [0];
	call-script stopAimHelper1(<1000>,<1000>);
	start-script SmokeUnit();
	call-script RockZInit();
	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	call-script stopAimHelper1(<80>,<80>);
	turn turret to y-axis <0.000000> speed <80.000000>;
	turn sleeve to x-axis <0.000000> speed <80.000000>;
	turn sleeve2 to x-axis <0.000000> speed <80.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 4 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	call-script updateAimHelper1(heading,pitch,<100>,<100>,HEADING_TOLERANCE,PITCH_TOLERANCE);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <100.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <100.000000>;
	turn sleeve2 to x-axis <0.000000> - pitch speed <100.000000>;
	if (!aimReady1)
	{
		wait-for-turn turret around y-axis;
		wait-for-turn sleeve around x-axis;
		wait-for-turn sleeve2 around x-axis;
	}
	start-script RestoreAfterDelay();
	aimHeading = heading;
	return (1);
}


AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	return (1);
}

TargetCleared(Func_Var_1)
{
	signal SIG_AIM_2;
	return (0);
}

FirePrimary()
{
	start-script RockZ(-5,aimHeading);
	if( gun_1 == [0] )
	{
		move barrel to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare;
		sleep 150;
		gun_1 = [1];
		move barrel to z-axis [0.000000] speed [7.500000];
		return (0);
	}
	if( gun_1 == [1] )
	{
		move barrel2 to z-axis [-7.500000] now;
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
		gun_1 = [0];
		move barrel2 to z-axis [0.000000] speed [7.500000];
		return (0);
	}
	return (0);
}

FireSecondary()
{
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare2;
	}
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = flareb;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flareb;
	return (0);
}


SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;

		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP2;
		explode sleeve type FALL | BITMAP1;
		explode sleeve2 type FALL | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		explode base type SHATTER | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP2;
		explode sleeve type FALL | BITMAP1;
		explode sleeve2 type FALL | BITMAP2;
		explode turret type SHATTER | BITMAP3;
		explode base type SHATTER | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | BITMAP1;
	explode barrel2 type FALL | BITMAP2;
	explode sleeve type FALL | BITMAP1;
	explode sleeve2 type FALL | BITMAP2;
	explode turret type SHATTER | BITMAP3;
	explode base type SHATTER | BITMAP3;
	return (0);
}
