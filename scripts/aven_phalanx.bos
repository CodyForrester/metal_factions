#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, flare3, flare4, turret, sleeve, s2, base, wheel1, wheel2,
       wheel3, wheel4, wheel5, wheel6, gun1, gun4, gun2, gun3;

static-var  restore_delay, gun_1, bAiming;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

StartMoving()
{
	spin wheel1 around x-axis speed <700.000000> accelerate <360.000000>;
	spin wheel2 around x-axis speed <700.000000> accelerate <360.000000>;
	spin wheel3 around x-axis speed <700.000000> accelerate <360.000000>;
	spin wheel4 around x-axis speed <700.000000> accelerate <360.000000>;
	spin wheel5 around x-axis speed <700.000000> accelerate <360.000000>;
	spin wheel6 around x-axis speed <700.000000> accelerate <360.000000>;
	return (0);
}

StopMoving()
{
	stop-spin wheel1 around x-axis decelerate <720.000000>;
	stop-spin wheel2 around x-axis decelerate <720.000000>;
	stop-spin wheel3 around x-axis decelerate <720.000000>;
	stop-spin wheel4 around x-axis decelerate <720.000000>;
	stop-spin wheel5 around x-axis decelerate <720.000000>;
	stop-spin wheel6 around x-axis decelerate <720.000000>;
	return (0);
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	gun_1 = [0];
	restore_delay = 3000;
	start-script SmokeUnit();
	bAiming = FALSE;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <200.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <200.000000>;
	if( pitch > 0 )
	{
		bAiming = TRUE;
	}
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	if( gun_1 == [0] )
	{
		move gun1 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare1;
		sleep 150;
		gun_1 = [1];
		move gun1 to z-axis [0.000000] speed [37.500000];
		return (0);
	}
	if( gun_1 == [1] )
	{
		move gun2 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare2;
		sleep 150;
		gun_1 = [2];
		move gun2 to z-axis [0.000000] speed [37.500000];
		return (0);
	}
	if( gun_1 == [2] )
	{
		move gun3 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare3;
		sleep 150;
		gun_1 = [3];
		move gun3 to z-axis [0.000000] speed [37.500000];
		return (0);
	}
	if( gun_1 == [3] )
	{
		move gun4 to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare4;
		sleep 150;
		gun_1 = [0];
		move gun4 to z-axis [0.000000] speed [37.500000];
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == [0] )
	{
		piecenum = flare1;
	}
	if( gun_1 == [1] )
	{
		piecenum = flare2;
	}
	if( gun_1 == [2] )
	{
		piecenum = flare3;
	}
	if( gun_1 == [3] )
	{
		piecenum = flare4;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
