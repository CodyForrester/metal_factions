#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, turret, barrel,sleeve, front, f2,stand, tl,tr,logo, floatbase, fb2,fb3,fb4;

static-var isFiring, isFloating;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	isFiring = FALSE;
	start-script SmokeUnit();

	hide floatbase;
	hide fb2;
	hide fb3;
	hide fb4;
	isFloating = FALSE;
	if ( GET GROUND_WATER_HEIGHT(GET UNIT_XZ) < [0])
	{
		isFloating = TRUE;
		show floatbase;
		show fb2;
		show fb3;
		show fb4;
	}

	return (0);
}

RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <50.038462>;
	turn sleeve to x-axis <0.000000> speed <50.038462>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (isFiring) {
		return (0);
	}	
	turn turret to y-axis heading speed <200.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <200.038462>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary(Func_Var_1)
{
	emit-sfx 1024 from flare;
	isFiring = TRUE;
	sleep 2000;
	isFiring = FALSE;	
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = sleeve;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		if (isFloating) 
		{
			corpsetype = 1;
		}
		if (!isFloating) 
		{
			corpsetype = 2;
		}
		explode tl type SHATTER | BITMAP3;
		explode tr type SHATTER | BITMAP3;
		explode base type SHATTER | BITMAP3;
		explode logo type SHATTER | BITMAP3;
		explode sleeve type SHATTER | BITMAP3;
		explode turret type SHATTER | BITMAP3;
		return corpsetype;
	}

	corpsetype = 3;
	explode tl type SHATTER | BITMAP3;
	explode tr type SHATTER | BITMAP3;
	explode base type SHATTER | BITMAP3;
	explode logo type SHATTER | BITMAP3;
	explode sleeve type SHATTER | BITMAP3;
	explode turret type SHATTER | BITMAP3;
	return corpsetype;
}
