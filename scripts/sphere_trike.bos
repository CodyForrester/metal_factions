#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 150

piece  base, turret,sleeve,barrel ,flash,t1,wheel1,t2,wheel2,t3,wheel3,bb;

static-var  restore_delay;

// Signal definitions
#define SIG_AIM				2

#include "wheelspeed.h"


SpinWheels(last)
{
	last = 0;
	while ( TRUE )
	{
		
		if ( last != (wheelSpeed / 8) )
		{
			spin t1 around x-axis speed wheelSpeed; // accelerate wheelAcceleration;
			spin t2 around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			spin t3 around x-axis speed wheelSpeed; //accelerate wheelAcceleration;
			last = wheelSpeed / 8;
		}
		sleep 100;
	}
	return (0);
}

StopWheels()
{
	stop-spin t1 around x-axis decelerate <12.000000>;
	stop-spin t2 around x-axis decelerate <12.000000>;
	stop-spin t3 around x-axis decelerate <12.000000>;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}



HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.016484>;
	turn base to x-axis Func_Var_1 speed <105.016484>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.005495>;
	turn base to x-axis <0.000000> speed <30.005495>;
}

Create()
{
	restore_delay = 3000;
	start-script WheelSpeedControl();
	start-script SpinWheels();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.016484>;
	turn sleeve to x-axis <0.000000> speed <50.005495>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <320.038462>;
	turn sleeve to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 + 0 from flash;
	return 0;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode sleeve type FALL | BITMAP1;
		explode sleeve type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode wheel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode wheel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;

}
