#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 100

piece  base, pivot, wake1, wake2, tbase, spinner, bottom, b2, d2, s1, s2,s3,d3, base1, base2,base3, turret, tur2, tur3, spike, sleeve,barrel,flare;

static-var  bAiming, bSwimming, restore_delay, terrainStatus, waterSpeed, landSpeed, lastHeading;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4

#include "spinbot.h"


recoil(anglex, anglez)
{
	anglex = <-1.000000> * (get KCOS(lastHeading)) / 100;
	anglez = <-1.000000> * (get KSIN(lastHeading)) / 100;
	
	turn base to x-axis anglex speed <150.005495>;
	turn base to z-axis anglez speed <150.005495>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <20.000000>;
	turn base to x-axis <0.000000> speed <20.000000>;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	spin spinner around y-axis speed <200.000000>;
	return (0);
}


walk(last)
{
	last = 0;
	while ( TRUE )
	{
		
		if ( last != (wheelSpeed / 8) )
		{
			spin spinner around y-axis speed <200.000000> + wheelSpeed; // accelerate wheelAcceleration;
			last = wheelSpeed / 8;
		}
		turn pivot to x-axis pivotAngle speed <30.000000>;
		sleep 100;
	}
	return (0);
}



closelegs()
{
	// nothing to do here
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed; // REPLACED BY GADGET
				//set UPRIGHT to TRUE;
				call-script walk();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				//set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			if( justMoved AND ( !bSwimming ) )
			{
				call-script stopWheels();
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100/150;
	//landSpeed = waterSpeed;	// same as land
	
	bMoving = FALSE;
	bAiming = FALSE;
	bSwimming = FALSE;
	lastHeading = 0;
	start-script MotionControl();
	start-script WheelSpeedControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}


RestoreAfterDelay()
{
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn tbase to y-axis <0.000000> speed <100.000000>;
	turn sleeve to x-axis <0.000000> speed <100.000000>;
	lastHeading = 0;
	return (0);
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn tbase to y-axis heading speed <160.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn tbase around y-axis;
	wait-for-turn sleeve around x-axis;
	lastHeading = heading;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	move barrel to z-axis [-3.000000] now;
	emit-sfx 1024 from flare;
	call-script recoil();
	sleep 130;
	move barrel to z-axis [0.00000] speed [3.000000];
	return (1);
}


AimFromPrimary(piecenum)
{
	piecenum = tbase;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = tbase;
	return (0);
}




Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		
		explode turret type SHATTER;
		explode base2 type SHATTER;
		explode base3 type SHATTER;
		return (0);
	}
	corpsetype = 2;

	explode base2 type SHATTER;
	explode base1 type SHATTER;
	explode turret type SHATTER;
	explode tur2 type SHATTER;
	explode barrel type SHATTER;
	explode spinner type SHATTER;
	
	return (0);
}
