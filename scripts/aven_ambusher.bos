#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, gun, turret, barrel,g2;

static-var  Static_Var_1, restore_delay;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}


RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0> speed <50.016484>;
	turn gun to x-axis <0.000000> speed <50.005495>;
	return (0);
}

Create()
{
	hide flare;
	restore_delay = 3000;
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn turret to y-axis heading speed <100.016484>;
	turn gun to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	move barrel to z-axis [-10.500000] now;
	emit-sfx 1024 + 0 from flare;
	sleep 250;
	move barrel to z-axis [0.000000] speed [7.500000];
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode g2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode g2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 4;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode g2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode barrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
