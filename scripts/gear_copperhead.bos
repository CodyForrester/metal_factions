#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  bastorn, vicktorn, veldror, vflamma, heldror, hflamma, base;

static-var  restore_delay, gun_1, Static_Var_3, Static_Var_4;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	hide vflamma;
	hide hflamma;
	restore_delay = 3000;
	start-script SmokeUnit();
	gun_1 = bastorn;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 4;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn bastorn to y-axis <0.000000> speed <100.000000>;
	turn vicktorn to x-axis <0.000000> speed <100.000000>;
	return (1);
}

activate()
{
	Static_Var_4 = 1;
	return (0);
}

deactivate()
{
	Static_Var_4 = 0;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn bastorn to y-axis heading speed <200.000000>;
	turn vicktorn to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn bastorn around y-axis;
	wait-for-turn vicktorn around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move veldror to z-axis [-10.000000] now;
		emit-sfx 1024 + 0 from vflamma;
		sleep 150;
		move veldror to z-axis [0.000000] speed [37.500000];
	}
	if( gun_1 == 1 )
	{
		move heldror to z-axis [-10.000000] now;
		emit-sfx 1024 + 0 from hflamma;
		sleep 150;
		move heldror to z-axis [0.000000] speed [37.500000];
	}
	++gun_1;
	if( gun_1 == 2 )
	{
		gun_1 = bastorn;
	}
	if( Static_Var_4 )
	{
		signal SIG_AIM;
		Static_Var_3 = 0;
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = vicktorn;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = vflamma;
	}
	if( gun_1 == 1 )
	{
		piecenum = hflamma;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = bastorn;
	return (0);
}

Killed(severity, corpsetype)
{
	hide vflamma;
	hide hflamma;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode vicktorn type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode veldror type BITMAPONLY | BITMAP1;
		explode heldror type BITMAPONLY | BITMAP1;
		explode bastorn type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode vicktorn type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode veldror type FALL | BITMAP1;
		explode heldror type FALL | BITMAP1;
		explode bastorn type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode vicktorn type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode veldror type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode heldror type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode bastorn type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode vicktorn type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode veldror type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode heldror type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode bastorn type SHATTER | BITMAP5;
	return (0);
}
