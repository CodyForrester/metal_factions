#define TAK			// This is a TAK script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, plate, gun, tire1, tire2,
       tire3, tire4, post;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, Static_Var_4;


SelfD()
{
	if( Static_Var_4 == 0 )
	{
		sleep 1;
		Static_Var_4 = 1;
		play-sound( "count1", 15 );
		emit-sfx 1024 + 0 from base;
		sleep 999;
		if( Static_Var_4 == 1 )
		{
			Static_Var_4 = 2;
			play-sound( "count2", 15 );
			emit-sfx 1024 + 1 from base;
			sleep 1000;
			if( Static_Var_4 == 2 )
			{
				Static_Var_4 = 3;
				play-sound( "count3", 15 );
				emit-sfx 1024 + 2 from base;
				sleep 1000;
				if( Static_Var_4 == 3 )
				{
					Static_Var_4 = 4;
					play-sound( "count4", 15 );
					emit-sfx 1024 + 3 from base;
					sleep 1000;
					if( Static_Var_4 == 4 )
					{
						Static_Var_4 = 5;
						play-sound( "count5", 15 );
						emit-sfx 1024 + 4 from base;
						sleep 1000;
						if( Static_Var_4 == 5 )
						{
							Static_Var_4 = 6;
							emit-sfx 1024 + 5 from base;
							play-sound( "count6", 35 );
							play-sound( "count6", 35 );
							sleep 100;
							emit-sfx 4096 + 0 from base;
						}
					}
				}
			}
		}
	}
	if( Static_Var_4 > 0 AND Static_Var_4 < 5 )
	{
		Static_Var_4 = 0;
		sleep 100;
	}
	if( Static_Var_4 == 5 )
	{
		emit-sfx 4096 + 1 from base;
		Static_Var_4 = 0;
		sleep 100;
	}
	return;
}

activatescr()
{
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-91.357143> speed <195.203297>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <90.115385> speed <192.571429>;
		sleep 80;
	}
	if( TRUE )
	{
		move door1 to y-axis [-4.625000] speed [9.819534];
		move door2 to y-axis [-4.875000] speed [10.350311];
		sleep 80;
	}
	if( TRUE )
	{
		move plate to y-axis [7.375000] speed [15.658157];
		sleep 80;
	}
	sleep 24;
	return;
}

deactivatescr()
{
	if( TRUE )
	{
		move plate to y-axis [7.375000] now;
		move plate to y-axis [0.000000] speed [17.312195];
		move door1 to y-axis [-4.625000] now;
		move door2 to y-axis [-4.875000] now;
		turn door1 to z-axis <-91.357143> now;
		turn door2 to z-axis <90.115385> now;
		sleep 122;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.000000] speed [10.806046];
		move door2 to y-axis [0.000000] speed [11.390182];
		sleep 122;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <213.456044>;
		turn door2 to z-axis <0.000000> speed <210.571429>;
		sleep 122;
	}
	sleep 22;
	return;
}

SmokeUnit(Func_Var_1, Func_Var_2, Func_Var_3)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		Func_Var_1 = get HEALTH;
		if( Func_Var_1 < 66 )
		{
			Func_Var_3 = 256 | 2;
			if( Rand( 1, 66 ) < Func_Var_1 )
			{
				Func_Var_3 = 256 | 1;
			}
			emit-sfx Func_Var_3 from base;
		}
		Func_Var_2 = Func_Var_1 * 50;
		if( Func_Var_2 < 200 )
		{
			Func_Var_2 = 200;
		}
		sleep Func_Var_2;
	}
	return;
}

Go()
{
	call-script activatescr();
	turn gun to y-axis Static_Var_1 speed <333.038462>;
	wait-for-turn gun around y-axis;
	set INBUILDSTANCE to 1;
	return;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn gun to y-axis <0.000000> speed <333.038462>;
	wait-for-turn gun around y-axis;
	call-script deactivatescr();
	return;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return;
}

Create()
{
	Static_Var_4 = 0;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	return;
}

Activate()
{
	start-script RequestState(0);
	return;
}

Deactivate()
{
	start-script RequestState(1);
	return;
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
	return (0);
}

StopBuilding()
{
	start-script RequestState(1);
	return;
}

StartMoving()
{
	spin tire1 around x-axis speed <150.027473>;
	spin tire2 around x-axis speed <150.027473>;
	spin tire3 around x-axis speed <150.027473>;
	spin tire4 around x-axis speed <150.027473>;
	return;
}

StopMoving()
{
	stop-spin tire1 around x-axis;
	stop-spin tire2 around x-axis;
	stop-spin tire3 around x-axis;
	stop-spin tire4 around x-axis;
	return;
}

QueryNanoPiece(Func_Var_1)
{
	Func_Var_1 = 1;
	return;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return;
}

SweetSpot(piecenum)
{
	piecenum = base;
	return;
}

Killed(Func_Var_1, Func_Var_2)
{
	if( Func_Var_1 <= 25 )
	{
		Func_Var_2 = 1;
		explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode beam type BITMAPONLY | EXPTYPE_MEDIUMEXPLOSION;
		explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode gun type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode post type BITMAPONLY | EXPTYPE_MEDIUMEXPLOSION;
		explode tire1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode tire2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode tire3 type BITMAPONLY | EXPTYPE_BLOODEXPLOSION;
		explode tire4 type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 50 )
	{
		Func_Var_2 = 2;
		explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode beam type FALL | EXPTYPE_MEDIUMEXPLOSION;
		explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode gun type 1 | EXPTYPE_BLOODEXPLOSION;
		explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode post type FALL | EXPTYPE_MEDIUMEXPLOSION;
		explode tire1 type FALL | EXPTYPE_LARGEEXPLOSION;
		explode tire2 type FALL | EXPTYPE_XLARGEEXPLOSION;
		explode tire3 type FALL | EXPTYPE_BLOODEXPLOSION;
		explode tire4 type FALL | EXPTYPE_SMALLEXPLOSION;
		return (0);
	}
	if( Func_Var_1 <= 99 )
	{
		Func_Var_2 = 3;
		explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode beam type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
		explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
		explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
		explode gun type 1 | EXPTYPE_BLOODEXPLOSION;
		explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
		explode post type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
		explode tire1 type FALL | 16 | 8 | 2 | EXPTYPE_LARGEEXPLOSION;
		explode tire2 type FALL | 16 | 8 | 2 | EXPTYPE_XLARGEEXPLOSION;
		explode tire3 type FALL | 16 | 8 | 2 | EXPTYPE_BLOODEXPLOSION;
		explode tire4 type FALL | 16 | 8 | 2 | EXPTYPE_SMALLEXPLOSION;
		return (0);
	}
	Func_Var_2 = 3;
	explode base type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
	explode beam type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	explode door1 type BITMAPONLY | EXPTYPE_LARGEEXPLOSION;
	explode door2 type BITMAPONLY | EXPTYPE_XLARGEEXPLOSION;
	explode gun type 1 | 2 | EXPTYPE_BLOODEXPLOSION;
	explode plate type BITMAPONLY | EXPTYPE_SMALLEXPLOSION;
	explode post type FALL | 16 | 8 | 2 | EXPTYPE_MEDIUMEXPLOSION;
	explode tire1 type FALL | 16 | 8 | 2 | EXPTYPE_LARGEEXPLOSION;
	explode tire2 type FALL | 16 | 8 | 2 | EXPTYPE_XLARGEEXPLOSION;
	explode tire3 type FALL | 16 | 8 | 2 | EXPTYPE_BLOODEXPLOSION;
	explode tire4 type FALL | 16 | 8 | 2 | EXPTYPE_SMALLEXPLOSION;
	return;
}
