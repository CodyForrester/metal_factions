#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, sleeve, barrel, flare, turret2, flare2,  holder2, wake1,
       wake2, torpedodrop;

static-var  Static_Var_1, Static_Var_2, restore_delay;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	Static_Var_1 = 3;
	Static_Var_2 = 4;
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}
		
RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <85.000000>;
	turn sleeve to x-axis <0.000000> speed <50.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn turret2 to y-axis <0.000000> speed <85.000000>;
	turn holder2 to x-axis <0.000000> speed <50.000000>;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <285.000000>;
	turn sleeve to x-axis <0.000000> - pitch speed <250.000000>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn sleeve around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <385.000000>;
	turn holder2 to x-axis <0.000000> - pitch speed <350.000000>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn holder2 around x-axis;
	start-script RestoreAfterDelay2();
	return (1);
}

AimWeapon3(Func_Var_1, Func_Var_2)
{
	signal 16;
	set-signal-mask 16;
	return (1);
}

FirePrimary()
{
	emit-sfx 1024 from flare;
}

FireSecondary()
{
	emit-sfx 1024+1 from flare2;
}

FireWeapon3()
{
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
	return (0);
}

AimFromWeapon3(piecenum)
{
	piecenum = torpedodrop;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare2;
	return (0);
}

QueryWeapon3(piecenum)
{
	piecenum = torpedodrop;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP2;
		explode holder2 type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type SHATTER | BITMAP2;
		explode holder2 type BITMAPONLY | BITMAP3;
		explode turret1 type FALL | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode sleeve type SHATTER | BITMAP2;
		explode holder2 type BITMAPONLY | BITMAP3;
		explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode holder2 type BITMAPONLY | BITMAP3;
	explode turret1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turret2 type BITMAPONLY | BITMAP2;
	return (0);
}
