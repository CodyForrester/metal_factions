#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 400

piece  leg1, leg2, leg3, leg4, base;

static-var  bMoving, justMoved;

stand()
{
	turn leg1 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg1 to y-axis <30.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg2 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg2 to y-axis <-30.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg3 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg3 to y-axis <30.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	
	turn leg4 to z-axis <0.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
	turn leg4 to y-axis <-30.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
}


walkscr()
{
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to z-axis <0.000000> now;
			turn leg1 to z-axis <-38.258242> speed <131.021978> * SPEEDUP_FACTOR / 100;
			turn leg2 to y-axis <55.362637> now;
			turn leg2 to y-axis <55.362637> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg2 to z-axis <38.258242> now;
			turn leg2 to z-axis <0.000000> speed <131.021978> * SPEEDUP_FACTOR / 100;
			turn leg3 to y-axis <0.000000> now;
			turn leg3 to y-axis <60.313187> speed <206.554945> * SPEEDUP_FACTOR / 100;
			turn leg3 to z-axis <37.807692> now;
			turn leg4 to y-axis <-60.313187> now;
			turn leg4 to y-axis <0.000000> speed <206.554945> * SPEEDUP_FACTOR / 100;
			turn leg4 to z-axis <0.000000> now;
			turn leg4 to z-axis <0.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
			sleep 292 * 100 / SPEEDUP_FACTOR;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <-55.362637> speed <188.950549> * SPEEDUP_FACTOR / 100;
			turn leg1 to z-axis <-38.258242> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg2 to y-axis <0.000000> speed <188.950549> * SPEEDUP_FACTOR / 100;
			turn leg2 to z-axis <0.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg3 to z-axis <0.000000> speed <129.038462> * SPEEDUP_FACTOR / 100;
			turn leg4 to z-axis <-38.258242> speed <130.576923> * SPEEDUP_FACTOR / 100;
			sleep 293 * 100 / SPEEDUP_FACTOR;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <-55.362637> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg1 to z-axis <0.000000> speed <131.021978> * SPEEDUP_FACTOR / 100;
			turn leg2 to z-axis <38.258242> speed <131.021978> * SPEEDUP_FACTOR / 100;
			turn leg3 to y-axis <0.000000> speed <206.554945> * SPEEDUP_FACTOR / 100;
			turn leg3 to z-axis <0.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
			turn leg4 to y-axis <-60.313187> speed <206.554945> * SPEEDUP_FACTOR / 100;
			turn leg4 to z-axis <-38.258242> speed <0.000000> * SPEEDUP_FACTOR / 100;
			sleep 292 * 100 / SPEEDUP_FACTOR;
		}
		turn leg1 to y-axis <0.000000> speed <188.950549> * SPEEDUP_FACTOR / 100;
		turn leg1 to z-axis <0.000000> speed <0.000000> * SPEEDUP_FACTOR / 100;
		turn leg2 to y-axis <55.362637> speed <188.950549> * SPEEDUP_FACTOR / 100;
		turn leg2 to z-axis <38.258242> speed <0.000000> * SPEEDUP_FACTOR / 100;
		turn leg3 to z-axis <37.807692> speed <129.038462> * SPEEDUP_FACTOR / 100;
		turn leg4 to y-axis <-60.313187> speed <0.000000> * SPEEDUP_FACTOR / 100;
		turn leg4 to z-axis <0.000000> speed <130.576923> * SPEEDUP_FACTOR / 100;
		sleep 293 * 100 / SPEEDUP_FACTOR;
	}
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walkscr();
		}
		if( justMoved)
		{
			call-script stand();
			justMoved = FALSE;
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	justMoved = FALSE;
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	justMoved = TRUE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = leg1;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type BITMAPONLY | BITMAP2;
		explode leg2 type BITMAPONLY | BITMAP3;
		explode leg3 type BITMAPONLY | BITMAP4;
		explode leg4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type SHATTER | BITMAP2;
		explode leg2 type FALL | BITMAP3;
		explode leg3 type FALL | BITMAP4;
		explode leg4 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode leg1 type SHATTER | BITMAP2;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode leg1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
