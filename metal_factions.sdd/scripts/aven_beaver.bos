#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, door1, door2, plate, arm, nano, turret;

static-var  Static_Var_1, isOpen;

// Signal definitions
#define SIG_BUILD			2



activatescr()
{
	if( !isOpen )
	{
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-70.664835> speed <282.131868>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <70.664835> speed <282.131868>;
		sleep 218;
		move door1 to y-axis [-5.875000] speed [25.102829];
		move door2 to y-axis [-5.625000] speed [24.460144];
		sleep 219;
		move plate to y-axis [11.125000] speed [38.598999];
		sleep 219;
		turn arm to x-axis <90.021978> speed <330.824176>;
		turn nano to x-axis <-66.164835> speed <369.653846>;
		sleep 210;
		isOpen = TRUE;
	}
	sleep 20;
	return (0);
}

deactivatescr()
{
	if( isOpen )
	{
		isOpen = FALSE;
		move plate to y-axis [11.125000] now;
		move door1 to y-axis [-5.875000] now;
		move door2 to y-axis [-5.625000] now;
		turn door1 to z-axis <-70.664835> now;
		turn door2 to z-axis <70.664835> now;
		turn arm to x-axis <90.021978> now;
		turn arm to x-axis <0.000000> speed <332.010989>;
		turn nano to x-axis <-66.164835> now;
		turn nano to x-axis <0.000000> speed <370.527473>;
		sleep 218;
		move plate to y-axis [0.000000] speed [38.598999];
		sleep 219;
		move door1 to y-axis [0.000000] speed [35.102829];
		move door2 to y-axis [0.000000] speed [34.460144];
		sleep 219;
		turn door1 to z-axis <0.000000> speed <281.197802>;
		turn door2 to z-axis <0.000000> speed <281.197802>;
		sleep 210;
	}
	sleep 20;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	call-script activatescr();
	turn turret to y-axis Static_Var_1 speed <160.038462>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn turret around y-axis;
	call-script deactivatescr();
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	isOpen = FALSE;
	start-script SmokeUnit();
	return (0);
}

StartBuilding(Func_Var_1)
{
	signal SIG_BUILD;
	Static_Var_1 = Func_Var_1;
	start-script Go();
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	set-signal-mask SIG_BUILD;
	Sleep DEFAULT_BUILDER_RESTORE_DELAY;
	start-script Stop();
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nano type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nano type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (0);
}
