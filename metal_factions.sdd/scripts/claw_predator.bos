#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 170

piece  base, wake1, wake2, turret, luparm, larm, l1,l2,l3,lgun,lg,lg2,lflare,lflare2, ruparm, r1,r2,r3,rgun,rg,rflare,head,eye1,eye2, rmidsup,rfrontsup,rbacksup,lbacksup,lmidsup,midwheel,lfrontsup, base1, base2, rs1,rs2,rs3,ls1,ls2,ls3, cover;

static-var  bMoving, bAiming, Static_Var_3, bSwimming, gun_2,
            restore_delay, terrainStatus, Static_Var_8, waterSpeed, landSpeed;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

stopWheels()
{
	stop-spin midwheel around x-axis decelerate <10.000000>;
	return (0);
}

walk()
{
	if( bMoving )
	{
		spin midwheel around x-axis speed <360.000000> accelerate <20.000000>;
		sleep 200;
	}
	return (0);
}


closelegs()
{
	// nothing to do here
	call-script stopWheels();
	sleep 100;
	return (0);
}

openlegs()
{
	// nothing to do here
	sleep 100;

	return (0);
}

swim()
{
	sleep 500;
	call-script closelegs();
	return (0);
}

MotionControl(justMoved)
{
	justMoved = TRUE;
	while( TRUE )
	{
		// over water
		if( ( !bSwimming ) AND (terrainStatus == 2 OR terrainStatus == 1))
		{
			call-script closelegs();
			bSwimming = TRUE;
			justMoved = TRUE;
		}
		// over land
		if( bSwimming AND terrainStatus == 4 )
		{
			call-script openlegs();
			bSwimming = FALSE;
			justMoved = TRUE;
		}
		if( bMoving )
		{
			Static_Var_3 = 1;
			if( bSwimming )
			{
				//set MAX_SPEED to waterSpeed; // REPLACED BY GADGET
				//set UPRIGHT to TRUE;
				call-script swim();
			}
			if( !bSwimming )
			{
				//set MAX_SPEED to landSpeed; // REPLACED BY GADGET
				//set UPRIGHT to FALSE;
				call-script walk();
			}
			justMoved = TRUE;
		}
		if( !bMoving )
		{
			Static_Var_3 = 1;
			if( justMoved AND ( !bSwimming ) )
			{
				call-script stopWheels();
	
				justMoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	landSpeed = get MAX_SPEED;
	waterSpeed = landSpeed * 100/150;
	//landSpeed = waterSpeed;	// same as land
	
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	bSwimming = FALSE;
	Static_Var_8 = 1;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( terrainStatus == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( terrainStatus == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	terrainStatus = Func_Var_1;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	set-signal-mask SIG_AIM;
	set-signal-mask SIG_AIM_2;
	sleep DEFAULT_WEAPON_RESTORE_DELAY;
	turn turret to y-axis <0.000000> speed <60.000000>;
	turn luparm to x-axis <0.000000> speed <60.000000>;
	turn ruparm to x-axis <0.000000> speed <60.000000>;
	return (0);
}


AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <120.000000>;
	turn ruparm to x-axis <0.000000> - pitch speed <120.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn ruparm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


FirePrimary()
{
	emit-sfx 1024 from rflare;
	return (1);
}


AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = rflare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = turret;
	return (0);
}



AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	bAiming = TRUE;
	turn turret to y-axis heading speed <120.000000>;
	turn luparm to x-axis <0.000000> - pitch speed <120.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn luparm around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}


FireSecondary()
{
	if (gun_2 == [0])
	{
		emit-sfx 1024+0 from lflare;
		sleep 100;
		gun_2 = [1];
		return (1);
	}
	if (gun_2 == [1])
	{
		emit-sfx 1024+0 from lflare2;
		sleep 100;
		gun_2 = [0];
		return (1);
	}
	
}


AimFromSecondary(piecenum)
{
	piecenum = turret;
	return (0);
}

QuerySecondary(piecenum)
{
	if (gun_2 == [0])
	{
		piecenum = lflare;
		return (0);
	}
	if (gun_2 == [1])
	{
		piecenum = lflare2;
		return (0);
	}
}


Killed(severity, corpsetype)
{
	if( severity <= 50 )
	{
		corpsetype = 1;
		
		explode head type SHATTER;
		explode base2 type SHATTER;
		return (0);
	}
	if( severity <= 75 )
	{
		corpsetype = 2;
		explode base2 type SHATTER;
		explode base1 type SHATTER;
		explode turret type SHATTER;
		explode head type SHATTER;
		explode luparm type SHATTER;
		explode ruparm type SHATTER;
		explode cover type SHATTER;
		explode lg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;

	explode base2 type SHATTER;
	explode base1 type SHATTER;
	explode turret type SHATTER;
	explode head type SHATTER;
	explode luparm type SHATTER;
	explode ruparm type SHATTER;
	explode cover type SHATTER;
	explode lg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	
	return (0);
}
