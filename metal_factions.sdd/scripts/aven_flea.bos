#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SPEEDUP_FACTOR 200

piece  body, turret, flare, barrel, lfupleg, lrupleg, rrupleg, head,
       rfupleg, rrleg, rfleg, lrleg, lfleg;

static-var  bMoving, bAiming, Static_Var_3, restore_delay, Static_Var_5,
            Static_Var_6;

// Signal definitions
#define SIG_AIM				2


walk()
{
	if( TRUE )
	{
		move lfupleg to y-axis [0.000000] now;
		move lfupleg to y-axis [0.000000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		move lrupleg to y-axis [0.000000] now;
		move lrupleg to y-axis [2.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [0.000000] now;
		move rrupleg to y-axis [2.500000] speed [17.500000] * SPEEDUP_FACTOR / 100;
		turn body to x-axis <12.000000> now;
		turn body to x-axis <22.000000> speed <95.000000> * SPEEDUP_FACTOR / 100;
		turn head to x-axis <9.000000> now;
		turn head to x-axis <20.000000> speed <108.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <-50.000000> now;
		turn lfupleg to x-axis <-22.000000> speed <254.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <23.000000> now;
		turn lrupleg to x-axis <-29.000000> speed <474.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <-49.000000> now;
		turn rfupleg to x-axis <-33.000000> speed <151.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <28.000000> now;
		turn rrupleg to x-axis <-21.000000> speed <439.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <45.000000> now;
		turn rrleg to x-axis <-25.000000> speed <633.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <0.000000> now;
		turn rfleg to x-axis <12.000000> speed <112.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <45.000000> now;
		turn lrleg to x-axis <-10.000000> speed <495.000000> * SPEEDUP_FACTOR / 100;
		sleep 110 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [2.500000] speed [10.000000] * SPEEDUP_FACTOR / 100;
		move lrupleg to y-axis [5.000000] speed [15.000000] * SPEEDUP_FACTOR / 100;
		move rfupleg to y-axis [2.500000] speed [20.000000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [5.000000] speed [15.000000] * SPEEDUP_FACTOR / 100;
		turn body to x-axis <1.000000> speed <189.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <54.000000> speed <671.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-40.000000> speed <96.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <51.000000> speed <742.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-32.000000> speed <101.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <15.000000> speed <348.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <-52.000000> speed <570.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <26.000000> speed <315.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <-53.000000> speed <465.000000> * SPEEDUP_FACTOR / 100;
		sleep 113 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [5.000000] speed [10.000000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [5.000000] speed [12.500000] * SPEEDUP_FACTOR / 100;
		turn body to x-axis <-13.000000> speed <241.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <87.000000> speed <605.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-61.000000> speed <381.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <83.000000> speed <563.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-62.000000> speed <529.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <73.000000> speed <1036.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <-58.000000> speed <106.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <72.000000> speed <821.000000> * SPEEDUP_FACTOR / 100;
		sleep 56 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [5.000000] speed [7.500000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [5.000000] speed [0.000000] * SPEEDUP_FACTOR / 100;
		turn body to x-axis <-26.000000> speed <233.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <121.000000> speed <584.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-32.000000> speed <498.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <114.000000> speed <543.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-31.000000> speed <527.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <55.000000> speed <306.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <-64.000000> speed <102.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <57.000000> speed <245.000000> * SPEEDUP_FACTOR / 100;
		sleep 58 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [2.500000] speed [15.000000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [2.500000] speed [12.500000] * SPEEDUP_FACTOR / 100;
		turn body to x-axis <0.000000> speed <233.000000> * SPEEDUP_FACTOR / 100;
		turn head to x-axis <0.000000> speed <182.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <60.000000> speed <546.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <4.000000> speed <322.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <53.000000> speed <546.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-3.000000> speed <250.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <30.000000> speed <220.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <27.000000> speed <808.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <23.000000> speed <309.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <13.000000> speed <588.000000> * SPEEDUP_FACTOR / 100;
		sleep 112 * 100 / SPEEDUP_FACTOR;
	}
	sleep 113 * 100 / SPEEDUP_FACTOR;
	return (0);
}

walklegs()
{
	if( TRUE )
	{
		move lrupleg to y-axis [2.500000] now;
		move lrupleg to y-axis [2.500000] speed [7.500000] * SPEEDUP_FACTOR / 100;
		move rfupleg to y-axis [2.500000] now;
		move rfupleg to y-axis [2.500000] speed [10.000000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [2.500000] now;
		move rrupleg to y-axis [2.500000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		turn head to x-axis <1.000000> now;
		turn head to x-axis <9.000000> speed <53.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <-12.000000> now;
		turn lfupleg to x-axis <0.000000> speed <91.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-56.000000> now;
		turn lrupleg to x-axis <-45.000000> speed <88.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <56.000000> now;
		turn rfupleg to x-axis <88.000000> speed <232.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-47.000000> now;
		turn rrupleg to x-axis <-66.000000> speed <140.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <13.000000> now;
		turn rrleg to x-axis <40.000000> speed <200.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <-39.000000> now;
		turn lrleg to x-axis <76.000000> now;
		turn lrleg to x-axis <70.000000> speed <42.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <1.000000> now;
		sleep 135 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [2.500000] speed [15.000000] * SPEEDUP_FACTOR / 100;
		move lrupleg to y-axis [2.500000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		turn head to x-axis <-7.000000> speed <112.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <50.000000> speed <366.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-9.000000> speed <261.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <29.000000> speed <429.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-50.000000> speed <122.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <48.000000> speed <63.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <22.000000> speed <449.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <71.000000> speed <4.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <-47.000000> speed <348.000000> * SPEEDUP_FACTOR / 100;
		sleep 136 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [2.500000] speed [15.000000] * SPEEDUP_FACTOR / 100;
		move rfupleg to y-axis [2.500000] speed [17.500000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [2.500000] speed [7.500000] * SPEEDUP_FACTOR / 100;
		turn head to x-axis <1.000000> speed <58.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <57.000000> speed <52.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-46.000000> speed <264.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <-22.000000> speed <371.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-40.000000> speed <69.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <46.000000> speed <17.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <5.000000> speed <127.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <51.000000> speed <141.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <-50.000000> speed <21.000000> * SPEEDUP_FACTOR / 100;
		sleep 138 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [2.500000] speed [2.500000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [2.500000] speed [2.500000] * SPEEDUP_FACTOR / 100;
		turn head to x-axis <4.000000> speed <21.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <82.000000> speed <181.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-61.000000> speed <115.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <15.000000> speed <272.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-38.000000> speed <14.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <49.000000> speed <24.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <-33.000000> speed <279.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <26.000000> speed <185.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <-80.000000> speed <223.000000> * SPEEDUP_FACTOR / 100;
		sleep 136 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lrupleg to y-axis [5.000000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [2.500000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		turn head to x-axis <8.000000> speed <24.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <87.000000> speed <42.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-78.000000> speed <125.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <32.000000> speed <122.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-32.000000> speed <49.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <56.000000> speed <49.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <78.000000> speed <383.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <-29.000000> speed <376.000000> * SPEEDUP_FACTOR / 100;
		sleep 136 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [2.500000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		move lrupleg to y-axis [2.500000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		move rfupleg to y-axis [2.500000] speed [7.500000] * SPEEDUP_FACTOR / 100;
		move rrupleg to y-axis [2.500000] speed [7.500000] * SPEEDUP_FACTOR / 100;
		turn head to x-axis <5.000000> speed <17.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <44.000000> speed <318.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-71.000000> speed <55.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <52.000000> speed <145.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-24.000000> speed <59.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <59.000000> speed <24.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <-52.000000> speed <135.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <1.000000> speed <221.000000> * SPEEDUP_FACTOR / 100;
		sleep 137 * 100 / SPEEDUP_FACTOR;
	}
	if( TRUE )
	{
		move lfupleg to y-axis [2.500000] speed [10.000000] * SPEEDUP_FACTOR / 100;
		move lrupleg to y-axis [2.500000] speed [5.000000] * SPEEDUP_FACTOR / 100;
		turn head to x-axis <0.000000> speed <38.000000> * SPEEDUP_FACTOR / 100;
		turn lfupleg to x-axis <16.000000> speed <202.000000> * SPEEDUP_FACTOR / 100;
		turn lrupleg to x-axis <-66.000000> speed <35.000000> * SPEEDUP_FACTOR / 100;
		turn rfupleg to x-axis <78.000000> speed <195.000000> * SPEEDUP_FACTOR / 100;
		turn rrupleg to x-axis <-4.000000> speed <143.000000> * SPEEDUP_FACTOR / 100;
		turn rrleg to x-axis <-20.000000> speed <585.000000> * SPEEDUP_FACTOR / 100;
		turn rfleg to x-axis <-74.000000> speed <164.000000> * SPEEDUP_FACTOR / 100;
		turn lrleg to x-axis <75.000000> speed <21.000000> * SPEEDUP_FACTOR / 100;
		turn lfleg to x-axis <-42.000000> speed <317.000000> * SPEEDUP_FACTOR / 100;
		sleep 136 * 100 / SPEEDUP_FACTOR;
	}
	sleep 136 * 100 / SPEEDUP_FACTOR;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from turret;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				move lrupleg to y-axis [0.000000] speed [12.500000];
				move rfupleg to y-axis [0.000000] speed [12.500000];
				move rrupleg to y-axis [0.000000] speed [12.500000];
				turn head to x-axis <0.000000> speed <200.000000>;
				turn lfupleg to x-axis <0.000000> speed <200.000000>;
				turn lrupleg to x-axis <0.000000> speed <200.000000>;
				turn rfupleg to x-axis <0.000000> speed <200.000000>;
				turn rrupleg to x-axis <0.000000> speed <200.000000>;
				turn rrleg to x-axis <0.000000> speed <200.000000>;
				turn lrleg to x-axis <0.000000> speed <200.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	hide flare;
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <150.000000>;
	wait-for-turn turret around y-axis;
	bAiming = FALSE;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <250.000000>;
	wait-for-turn turret around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 100;
	hide flare;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel type BITMAPONLY | BITMAP4;
		explode rrleg type BITMAPONLY | BITMAP5;
		explode rfleg type BITMAPONLY | BITMAP4;
		explode lrleg type BITMAPONLY | BITMAP4;
		explode lfleg type BITMAPONLY | BITMAP4;
		explode body type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel type FALL | BITMAP3;
		explode rrleg type FALL | BITMAP4;
		explode rfleg type FALL | BITMAP5;
		explode lrleg type FALL | BITMAP3;
		explode lfleg type FALL | BITMAP4;
		explode body type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lrleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lfleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
