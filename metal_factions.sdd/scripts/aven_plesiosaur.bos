#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, tur1, tur2, tur3, sleeve1, sleeve2, sleeve3, wake1,
       wake2, body, barrel1a, barrel1b, barrel2a, barrel2b, barrel2c, flare1a,
       flare1b, flare2a, flare2b, flare2c, flare3a, flare3b, flare3c, wheel1,
       wheel2, wheel3, wheel4, wheel5, wheel6, wheel7, wheel8, base2;

static-var  Static_Var_1, bMoving, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, restore_delay, Static_Var_8, Static_Var_9, Static_Var_10,
            gun_1, gun_3;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_3			8


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

walk()
{
	set UNKNOWN_UNIT_VALUE(75) to Static_Var_10 / 2;
	if( TRUE )
	{
		spin wheel1 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel2 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel3 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel4 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel5 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel6 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel7 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel8 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		sleep 100;
	}
	sleep 1;
	return (0);
}

walklegs()
{
	set UNKNOWN_UNIT_VALUE(75) to Static_Var_10 / 2;
	if( TRUE )
	{
		spin wheel1 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel2 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel3 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel4 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel5 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel6 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel7 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		spin wheel8 around x-axis speed Static_Var_10 / <0.016484> accelerate Static_Var_10 / <0.032967>;
		sleep 100;
	}
	sleep 1;
	return (0);
}

transform()
{
	set UNKNOWN_UNIT_VALUE(75) to Static_Var_10;
	if( TRUE )
	{
		turn wheel1 to z-axis <-90.000000> speed <70.000000>;
		turn wheel2 to z-axis <90.000000> speed <70.000000>;
		turn wheel3 to z-axis <-90.000000> speed <70.000000>;
		turn wheel4 to z-axis <90.000000> speed <70.000000>;
		turn wheel5 to z-axis <-90.000000> speed <70.000000>;
		turn wheel6 to z-axis <90.000000> speed <70.000000>;
		turn wheel7 to z-axis <-90.000000> speed <70.000000>;
		turn wheel8 to z-axis <90.000000> speed <70.000000>;
		turn body to z-axis <10.005495> speed <50.000000>;
		move body to y-axis [4.500000] speed [125.000000];
		sleep 250;
	}
	if( TRUE )
	{
		turn wheel1 to z-axis <-180.000000> speed <70.000000>;
		turn wheel2 to z-axis <180.000000> speed <70.000000>;
		turn wheel3 to z-axis <-180.000000> speed <70.000000>;
		turn wheel4 to z-axis <180.000000> speed <70.000000>;
		turn wheel5 to z-axis <-180.000000> speed <70.000000>;
		turn wheel6 to z-axis <180.000000> speed <70.000000>;
		turn wheel7 to z-axis <-180.000000> speed <70.000000>;
		turn wheel8 to z-axis <180.000000> speed <70.000000>;
		turn body to z-axis <-10.005495> speed <50.000000>;
		sleep 250;
	}
	if( TRUE )
	{
		turn body to z-axis <0.000000> speed <10.000000>;
		sleep 250;
	}
	sleep 73;
	return (0);
}

reform()
{
	set UNKNOWN_UNIT_VALUE(75) to Static_Var_10 / 2;
	if( TRUE )
	{
		turn wheel1 to z-axis <0.000000> speed <70.000000>;
		turn wheel2 to z-axis <0.000000> speed <70.000000>;
		turn wheel3 to z-axis <0.000000> speed <70.000000>;
		turn wheel4 to z-axis <0.000000> speed <70.000000>;
		turn wheel5 to z-axis <0.000000> speed <70.000000>;
		turn wheel6 to z-axis <0.000000> speed <70.000000>;
		turn wheel7 to z-axis <0.000000> speed <70.000000>;
		turn wheel8 to z-axis <0.000000> speed <70.000000>;
		turn body to z-axis <-10.005495> speed <1000.000000>;
		move body to y-axis [0.000000] speed [2500.000000];
		sleep 150;
	}
	if( TRUE )
	{
		turn body to z-axis <10.005495> speed <50.000000>;
		sleep 150;
	}
	if( TRUE )
	{
		turn body to z-axis <0.000000> speed <10.000000>;
		sleep 150;
	}
	sleep 73;
	return (0);
}

swim()
{
	set UNKNOWN_UNIT_VALUE(75) to Static_Var_10;
	sleep 1000;
	if( TRUE )
	{
		stop-spin wheel1 around x-axis;
		stop-spin wheel2 around x-axis;
		stop-spin wheel3 around x-axis;
		stop-spin wheel4 around x-axis;
		stop-spin wheel5 around x-axis;
		stop-spin wheel6 around x-axis;
		stop-spin wheel7 around x-axis;
		stop-spin wheel8 around x-axis;
		stop-spin wheel1 around y-axis;
		stop-spin wheel2 around y-axis;
		stop-spin wheel3 around y-axis;
		stop-spin wheel4 around y-axis;
		stop-spin wheel5 around y-axis;
		stop-spin wheel6 around y-axis;
		stop-spin wheel7 around y-axis;
		stop-spin wheel8 around y-axis;
		stop-spin wheel1 around z-axis;
		stop-spin wheel2 around z-axis;
		stop-spin wheel3 around z-axis;
		stop-spin wheel4 around z-axis;
		stop-spin wheel5 around z-axis;
		stop-spin wheel6 around z-axis;
		stop-spin wheel7 around z-axis;
		stop-spin wheel8 around z-axis;
	}
	sleep 10;
	return (0);
}

MotionControl(Func_Var_1)
{
	Func_Var_1 = 1;
	while( TRUE )
	{
		if( Static_Var_8 == 2 AND ( !Static_Var_5 ) )
		{
			call-script transform();
			Static_Var_5 = 1;
			Func_Var_1 = 1;
		}
		if( Static_Var_5 AND Static_Var_8 == 1 OR Static_Var_8 == 4 )
		{
			call-script reform();
			Static_Var_5 = 0;
			Func_Var_1 = 1;
		}
		if( bMoving )
		{
			if( Static_Var_3 )
			{
				Static_Var_4 = 1;
				if( Static_Var_5 )
				{
					call-script swim();
				}
				if( !Static_Var_5 )
				{
					call-script walklegs();
				}
			}
			if( !Static_Var_3 )
			{
				Static_Var_4 = 0;
				if( Static_Var_5 )
				{
					call-script swim();
				}
				if( !Static_Var_5 )
				{
					call-script walk();
				}
			}
			Func_Var_1 = 1;
		}
		if( !bMoving )
		{
			Static_Var_4 = 1;
			if( Func_Var_1 AND ( !Static_Var_5 ) )
			{
				stop-spin wheel1 around x-axis;
				stop-spin wheel2 around x-axis;
				stop-spin wheel3 around x-axis;
				stop-spin wheel4 around x-axis;
				stop-spin wheel5 around x-axis;
				stop-spin wheel6 around x-axis;
				stop-spin wheel7 around x-axis;
				stop-spin wheel8 around x-axis;
				stop-spin wheel1 around y-axis;
				stop-spin wheel2 around y-axis;
				stop-spin wheel3 around y-axis;
				stop-spin wheel4 around y-axis;
				stop-spin wheel5 around y-axis;
				stop-spin wheel6 around y-axis;
				stop-spin wheel7 around y-axis;
				stop-spin wheel8 around y-axis;
				stop-spin wheel1 around z-axis;
				stop-spin wheel2 around z-axis;
				stop-spin wheel3 around z-axis;
				stop-spin wheel4 around z-axis;
				stop-spin wheel5 around z-axis;
				stop-spin wheel6 around z-axis;
				stop-spin wheel7 around z-axis;
				stop-spin wheel8 around z-axis;
				stop-spin wheel8 around y-axis decelerate <0.054945>;
				wait-for-turn wheel8 around y-axis;
				Func_Var_1 = 0;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	Static_Var_10 = get UNKNOWN_UNIT_VALUE(75);
	set UNKNOWN_UNIT_VALUE(75) to Static_Var_10;
	bMoving = FALSE;
	Static_Var_3 = 0;
	Static_Var_4 = 1;
	Static_Var_5 = 0;
	Static_Var_9 = 1;
	gun_1 = tur1;
	gun_3 = tur1;
	hide flare1a;
	hide flare1b;
	hide flare2a;
	hide flare2b;
	hide flare2c;
	hide flare3a;
	hide flare3b;
	hide flare3c;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_8 == 2 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		if( Static_Var_8 == 1 )
		{
			emit-sfx 2 from wake1;
			emit-sfx 2 from wake2;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(Func_Var_1)
{
	Static_Var_8 = Func_Var_1;
	return (0);
}

Reload()
{
	sleep 2250;
	Static_Var_1 = 1;
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay1()
{
	sleep restore_delay;
	turn tur1 to y-axis <0.000000> speed <8.000000>;
	turn sleeve1 to x-axis <0.000000> speed <8.000000>;
	return (0);
}

RestoreAfterDelay2()
{
	sleep restore_delay;
	turn tur2 to y-axis <0.000000> speed <55.000000>;
	turn sleeve2 to x-axis <0.000000> speed <25.000000>;
	return (0);
}

RestoreAfterDelay3()
{
	sleep restore_delay;
	turn tur3 to y-axis <0.000000> speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> speed <150.000000>;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn tur1 to y-axis heading speed <50.000000>;
	turn sleeve1 to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn tur1 around y-axis;
	wait-for-turn sleeve1 around x-axis;
	start-script RestoreAfterDelay1();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn tur3 to y-axis heading speed <150.000000>;
	turn sleeve3 to x-axis <0.000000> - pitch speed <150.000000>;
	wait-for-turn tur3 around y-axis;
	wait-for-turn sleeve3 around x-axis;
	start-script RestoreAfterDelay3();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1a to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare1a;
		sleep 150;
		move barrel1a to z-axis [0.000000] speed [1.250000];
		hide flare1a;
		gun_1 = tur1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel1b to z-axis [-5.000000] now;
		emit-sfx 1024 + 0 from flare1b;
		sleep 150;
		move barrel1b to z-axis [0.000000] speed [1.250000];
		hide flare1b;
		gun_1 = base;
		return (0);
	}
}

FireTertiary()
{
	if( gun_3 == 0 )
	{
		show flare3a;
		sleep 150;
		hide flare3a;
		gun_3 = tur1;
		return (0);
	}
	if( gun_3 == 1 )
	{
		show flare3b;
		sleep 150;
		hide flare3b;
		gun_3 = tur2;
		return (0);
	}
	if( gun_3 == 2 )
	{
		show flare3c;
		sleep 150;
		hide flare3c;
		gun_3 = base;
		Static_Var_1 = 0;
		call-script Reload();
	}
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = tur1;
	return (0);
}

AimFromTertiary(piecenum)
{
	piecenum = tur3;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1a;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare1b;
	}
	return (0);
}

QueryTertiary(piecenum)
{
	if( gun_3 == 0 )
	{
		piecenum = flare3a;
	}
	if( gun_3 == 1 )
	{
		piecenum = flare3b;
	}
	if( gun_3 == 2 )
	{
		piecenum = flare3c;
	}
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = tur1;
	return (0);
}

Killed(severity, corpsetype)
{
	explode barrel1a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2b type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2c type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP5;
	explode tur1 type BITMAPONLY | BITMAP4;
	explode tur3 type BITMAPONLY | BITMAP3;
	explode wake1 type BITMAPONLY | BITMAP3;
	explode wake2 type BITMAPONLY | BITMAP3;
	explode flare1a type BITMAPONLY | BITMAP3;
	explode flare2b type BITMAPONLY | BITMAP3;
	explode flare3b type BITMAPONLY | BITMAP3;
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (0);
	}
	explode tur1 type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel2a type FALL | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode tur3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1a type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	return (0);
}
